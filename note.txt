SELECT `jam_masuk` 
FROM `jadwal_gurus` 
WHERE `hari` = 
    CASE 
        WHEN DAYNAME(NOW()) = 'Monday' THEN 'Senin'
        WHEN DAYNAME(NOW()) = 'Tuesday' THEN 'Selasa'
        WHEN DAYNAME(NOW()) = 'Wednesday' THEN 'Rabu'
        WHEN DAYNAME(NOW()) = 'Thursday' THEN 'Kamis'
        WHEN DAYNAME(NOW()) = 'Friday' THEN 'Jumat'
        WHEN DAYNAME(NOW()) = 'Saturday' THEN 'Sabtu'
        WHEN DAYNAME(NOW()) = 'Sunday' THEN 'Minggu'
    END;


    public function rewardUser(Request $request)
    {
        $user = Auth::user(); // Ambil user yang sedang login

        // Query dasar hanya untuk user yang sedang login
        $query = DB::table('absensis')
            ->join('users', 'absensis.guru_id', '=', 'users.id')
            ->select(
                'users.name as nama_guru',
                'users.id as id_user',
                'users.id_guru as id_guru',
                'users.program_studi as mapel',
                DB::raw('MAX(absensis.tgl_absen) as tgl_absen'),
                DB::raw('MAX(CASE WHEN absensis.status = "Masuk" THEN absensis.jam_absen END) as jam_masuk'),
                DB::raw('MAX(CASE WHEN absensis.status = "Pulang" THEN absensis.jam_absen END) as jam_pulang')
            )
            ->where('users.id', $user->id) // Filter hanya user yang login
            ->groupBy('users.id_guru', 'users.name', 'users.id', 'users.program_studi');

        // Filter berdasarkan tanggal absen jika ada
        if ($request->has('from_date') && $request->has('until_date')) {
            $fromDate = $request->input('from_date');
            $untilDate = $request->input('until_date');
            $query->whereBetween('absensis.tgl_absen', [$fromDate, $untilDate]);
        }

        // Ambil data absensi guru yang login
        $rewards = $query->get();

        // Jika tidak ada data, kembalikan dengan pesan error
        if ($rewards->isEmpty()) {
            return back()->with('error', 'Data absensi tidak ditemukan.');
        }

        // Ambil jadwal shift berdasarkan ID Guru yang login
        $schedules = DB::table('shift_schedules')
            ->leftJoin('users', 'shift_schedules.id_guru', '=', 'users.id_guru')
            ->leftJoin('shift_codes', 'shift_schedules.shift_code', '=', 'shift_codes.id')
            ->select(
                'shift_schedules.*',
                'users.name as nama_guru',
                'shift_codes.note as shift_note',
                'shift_codes.jam_masuk',
                'shift_codes.jam_pulang'
            )
            ->where('users.id', $user->id) // Filter hanya untuk user yang login
            ->first();

        // Jika tidak ada jadwal shift, kirim pesan error
        if (!$schedules) {
            return back()->with('error', 'Jadwal shift tidak ditemukan.');
        }

        $amountTransport = TunjTranspost::where('id', 1)->value('amount');

        // Jika tunjangan transport tidak ditemukan
        if (!$amountTransport) {
            return back()->with('error', 'Data tunjangan transport tidak ditemukan.');
        }

        $transportAmount = $amountTransport; // Uang transport tetap
        $rewardData = [];

        foreach ($rewards as $reward) {
            $diffMasuk = null;
            $diffPulang = null;
            $transportReward = 0;
            $percentage = 100; // Default reward

            if ($schedules) {
                $jamMasuk = Carbon::parse($schedules->jam_masuk);
                $jamPulang = Carbon::parse($schedules->jam_pulang);

                $absensiMasuk = $reward->jam_masuk ? Carbon::parse($reward->jam_masuk) : null;
                $absensiPulang = $reward->jam_pulang ? Carbon::parse($reward->jam_pulang) : null;

                if ($absensiMasuk) {
                    $diffMasuk = $jamMasuk->diffInMinutes($absensiMasuk, false);
                }
                if ($absensiPulang) {
                    $diffPulang = $jamPulang->diffInMinutes($absensiPulang, false);
                }

                if (abs($diffMasuk) >= 45 || abs($diffPulang) >= 45) {
                    $percentage = 25;
                } elseif (abs($diffMasuk) >= 30 || abs($diffPulang) >= 30) {
                    $percentage = 50;
                } elseif (abs($diffMasuk) >= 15 || abs($diffPulang) >= 15) {
                    $percentage = 75;
                }

                $transportReward = $transportAmount * ($percentage / 100);
            }

            $rewardData[] = [
                'reward' => $reward,
                'diffMasuk' => $diffMasuk,
                'diffPulang' => $diffPulang,
                'transportReward' => $transportReward,
                'shift_note' => $schedules->shift_note,
                'percentage' => $percentage,
            ];
        }

        return view('reward.user', compact('rewardData', 'schedules', 'transportAmount', 'percentage'));
    }